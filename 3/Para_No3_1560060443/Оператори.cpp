#include <iostream>
using namespace std;

int main()
{
	// Оператор - це конструкція, завдяки якій можна здійснювати різні операції над даними.
	// Операнд - дані, над якими проводять операції.

	// Типи операторів:
	// Унарні - треба лише 1 операнд
	// Бінарні - треба лише 2 операнди
	// Тернарний - треба 3 операнди (в С++ він один такий).

	// Але будемо знайомитись з операторами по іншому.

	// --- Арифметичні оператори ---:
	// 1. Присвоювання "="
	int a = 30; // "=" - це оператор присвоєння. Він присвоює значення справа від нього змінній, яка находиться зліва від нього.

	// 2. Унарний плюс "+"
	int b = 10;
	int c = +10; // в даному випадку "+" є унарним, він лише підкреслює, що 10 є додатнім числом. Застосовується рідко.

	// 3. Унарний мінус "-"
	int d = 3;
	int e = -d; // в даному випадку "-" є унарним, він повертає значення, протилежне значенню змінної справа від нього (не міняючи її)
	cout << d << " " << e << endl; // на екрані 3 -3

	// 4-7. Додавання, віднімання, множення, ділення "+", "-", "*", "/"
	int f = 2 + 4;  // f = 6
	int g = f - 5;  // g = 1
	int h = g * f;  // f = 6
	int j = h / 2;  // j = 3

	// 8. Ділення по модулю "%"
	int k = 10;
	int l = k % 2; // що запишеться в змінну? 0. Чому? Тому що ділення по модулю находить остачу від ділення і її повертає. Скільки число
				   // 2 повністю вміщається в числі 10? 5 разів, а точніше повністю. Тому 0.

	cout << 8 % 3 << endl;  // 3 повністю лише 2 раз вміщається, це буде 6. Числу 6 не хватає двійки, щоб стати 8. Тому на екрані 2.
	cout << 16 % 9 << endl; // 9 повністю лише 1 раз вміщається, це буде 9. Числу 9 не хватає сімки, щоб стати 16. Тому на екрані 7.

	// Зауваження: цей оператор в мові С++ працює лише з цілими числами

	// 9. Інкремент "++" і дикремент "--"
	// В програмуванні дуже багато задач де треба щось перераховувати. І для цього зазвичай створюється лічильник-змінна, яка з кожним разом
	// збільшується на одиницю. Тому одні програмісти пішли іншим на зустріч, створивши скорочені оператори інкременту і дикременту.
	// Призначення інкременту: збільшити значення змінної на 1.
	int n = 5;
	cout << n << endl; // 5
	n++;
	cout << n << endl; // 6
	++n;
	cout << n << endl; // 7

	// Призначення дикременту: зменшувати значення змінної на 1.
	int m = 6;
	cout << m << endl; // 6
	m++;
	cout << m << endl; // 5
	++m;
	cout << m << endl; // 4

	// Зауваження: коли інкремент/дикремент стоїть ПІСЛЯ змінної, ця форма називається ПОСТФІКСНОЮ / СУФІКСНОЮ
	//             коли інкремент/дикремент стоїть ПЕРЕД змінною, ця форма називається ПРЕФІКСНОЮ
	// Різниця між ними в верхніх прикладах відсутня. Але вона є, якщо їх застосовувати у виразах:
	int o = 10;
	int p = o++;
	cout << o << endl; // 11
	cout << p << endl; // 10

	int r = 10;
	int s = --r;
	cout << r << endl; // 9
	cout << s << endl; // 9

	// З прикладів можна замітити, що префіксна форма говорить наступне: спочатку ЗМІНИТИ значення змінної, а потім його ПОВЕРНУТИ
	//                    постфіксна / суфіксна форма говорить наступне: спочатку ПОВЕРНУТИ значення змінної, а потім його ЗМІНИТИ

	// --- Оператори порівняння ---:
	// Дуже часто вам прийдеться робити ваші програми розумнішими, навчаючи їх аналізувати різні умови, в залежності від яких вони
	// будуть виконувати різні дії. При аналізі цих умов застосовуються логічні оператори. ВСІ логічні оператори повертають
	// значення типу bool, тобто правду (1) або неправду (0). Це і логічно, бо все інше їм і не треба повертати.

	// 1-2. Рівенство "==" і нерівенство "!="
	// Якщо ви хочете порівняти значення двох змінних, застосовуйте оператор "==".
	int one = 1, two = 2;
	cout << "1 = 2? Answer: " << (one == two) << endl; // на екрані 0 (брехня), бо 1 не рівний 2.

	// Зауваження №1: замітили дужки? Якщо їх убрати, буде помилка на етапі компіляції
	// Зауваження №2: не плутайте в програмуванні оператор "=" і оператор "==". Перший нічого не порівнює, він просто присвоює число справа змінній зліва.
	//                Другий же порівнює два значення по обидві сторони від нього і якщо вони рівні - повертає 1. Інакше 0.

	// Щоб перевірити два значення на НЕ рівність, використовуйте оператор "!=".
	cout << "1 != 2? Answer: " << (one != two) << endl; // на екрані 1 (правда), бо 1 дійсно не рівний 2

	// 2-3. Більше ">" i менше "<".
	cout << "1 < 2? Answer: " << (one < two) << endl; // на екрані 1 (правда), бо 1 менший за 2
	cout << "1 > 2? Answer: " << (one > two) << endl; // на екрані 0 (брехня), бо 1 НЕ більший за 2

	// 4-5. Більше чи рівне ">=" і менше чи рівне "<=".
	int a1 = 1, a2 = 2, a3 = 2;
	cout << "a1 <= a2? Answer: " << (a1 <= a2) << endl; // на екрані 1 (правда), бо 1 хоч і НЕ рівний 2, АЛЕ менший
	cout << "a2 <= a3? Answer: " << (a2 <= a3) << endl; // на екрані 1 (правда), бо 2 хоч і НЕ менше 2, АЛЕ рівне

	system("pause");
	return 0;
}