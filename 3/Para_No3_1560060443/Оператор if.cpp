#include <iostream>
using namespace std;

int main()
{
	// До цього моменту ваші програми виконували послідовно програми, не аналізуючи ніяких умов і були скучними.
	// Щоб заставити програму аналізувати деякі умови і виконувати РІЗНИЙ код в залежності від її істинності, використовується
	// оператор логічного вибору IF.

	// Синтаксис if:

	// if (умова)
	// {
	//   	Дія
	// }

	// В частині "умова" пишеться абсолютно любий вираз. Зазвичай це вираз, в якому використовують логічні оператори, і ви
	// 99.9% часу будете писати саме такі вирази в if. Якщо вираз рівний значенню 0 - умова не вірна і код, який написаний
	// в "Дія" не спрацює. Якщо вираз НЕ рівний значеню 0 - код в фігурних дужках оператору if спрацює.

	// Приклад:
	int a = 10;

	if (a == 10)
	{
		cout << "Oops.\n";
		cout << "A really equals 10!n";
	}

	// Пояснення: а = 10. Скажіть, 10 рівне числу 10? Так, тому оператор "==" повертає true (1), а це не 0 (не брехня), тому
	//            дія в фігурних дужках if спрацьовує.

	// Приклад №2:
	int number;
	cout << "Enter your number: ";
	cin >> number;

	if (number > 0)
	{
		cout << "Your number is positive!\n";
	}

	// Пояснення: якщо користувач введе число більше за нуль, тому умова в операторі if буде правдивою, отже дія спрацює.

	// Зауваження: не забувайте про фігурні дужки оператору if! Якщо їх убрати то наступний код буде працювати не так, як
	//             ви думаєте!
	int b = 10;
	if (b == 5)
		cout << "Your number b ";
		cout << "equals 5!\n";

	// 10 не рівне числу 5, тому дія в if не має спрацювати, але ми бачимо на екрані "equals 5!". Чому?
	// Тому що оператор if вимагає після написання умови ОДИН оператор. Тут під словом "Оператор" мається на увазі
	// рядок коду, який закінчується КРАПКОЮ З КОМОЮ. Він є, це рядок №49. Рядок №50 НЕ відноситься до оператора if
	// тому він виконається в любому випадку.

	// Висновок: якщо вам треба і дії оператора if написати один рядок коду - дужки можете убрати а можете залишити.
	//           Інакше якщо вам треба в дії if написати 2 або більше рядка коду з багатьма крапками з комою - ставте дужки!

	// Бувають випадки, коли треба щоб комп'ютер аналізував умову, і якщо вона правдива - щось виконував, а якщо ні - ТАКОЖ щось робив.
	// Наприклад задача: користувач вводить число. Якщо воно додатнє - вивести що воно додатнє. А інакше вивести що від'ємне або рівне 0.

	// Ось перший невдалий приклад:
	int userNumber;
	cout << "Enter your number: ";
	cin >> userNumber;

	if (userNumber > 0)
		cout << "Your number is positive.\n";

	cout << "Your number is 0 or negative.\n";

	// Проблема цього коду в тому, що якщо користувач введе додатнє число, то йому виведе обидва повідомлення.
	// Щоб вирішити цю проблему, існує оператор else (інакше), який пишеться ПІСЛЯ оператора if:
	if (userNumber > 0)
		cout << "Your number is positive.\n";
	else
		cout << "Your number is 0 or negative.\n";

	// else працює просто - якщо умова if брехлива (вираз не рівний 0) то виконується дія в else.
	// якщо умова в if правдива - виконується дія оператора if, а дія оператора else пропускається.

	// Залишилось поговорити про останній момент: а якщо користувач введе 0, я можу вивести що він ввів 0?
	// Як зробити 3 "розгалуження": додатнє, 0, від'ємне?

	// Перший варіант менш зручніший, але пояснить як можна вирішити задачу:
	if (userNumber > 0)
		cout << "Your number is positive.\n";
	else
	{
		if (userNumber == 0)
			cout << "Your number is 0.\n";
		else
			cout << "Your number is negative.\n";
	}

	// З цього прикладу слідує те, що ви можете засовувати оператори if в оператори if або else.
	// Якщо користувач введе додатнє число, то спрацює умова в рядку №87, а в else ні.
	// Інакше спрацює else і в ньому всередині знову перевірятиметься внутрішня умова if. Якщо
	// користувач ввів 0, то умова в рядку №91 буде правдивою і спрацює його дія. Інакше спрацює
	// дія в else.

	// А тепер представте що варіантів не 3, а 10. Це прийдеться засовувати if в if в if і так далі.
	// Код стане дуже жахливим. Тому є простіший варіант. Я верхній приклад перепишу і ви зрозумієте,
	// як все виглядатиме гарніше.
	if (userNumber > 0)
		cout << "Your number is positive.\n";
	else if (userNumber == 0)
		cout << "Your number is 0.\n";
	else
		cout << "Your number is negative.\n";

	// Логіка проста: перевіряються всі if підряд. Якщо перший if правдивий - виконується його дія, інші ігноруються.
	// Інакше якщо другий if правдивий - виконується його дія, інші ігноруються. І так поки не перевіряться всі if.
	// Якщо всі оператори if неправдиві, то виконується дія в else.

	return 0;
}