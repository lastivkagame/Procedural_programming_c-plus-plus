#include <iostream>
using namespace std;

int main()
{
	// Який результат виведе на екран:
	cout << 2 + 6 / 2 << endl;

	// 5 чи 4? В математиці ви знаєте що першим іде ділення. Але чи йде ділення першим
	// за додавання в С++?

	// Щоб дати відповідь на це питання, ви маєте знати що кожний оператор в С++ має
	// свій пріорітет. Гляньте на число 6. У нього зліва оператор "+" а справа оператор "/".
	// Оператор ділення в С++ має МЕНШИЙ пріорітет, ніж оператор "+", тому він до числа 6
	// застосується перший. Тобто результат буде еквівалентний наступному:
	cout << 2 + (6 / 2) << endl;

	// А отже відповідь 5.
	// А якщо я хочу щоб спочатку 6 добавилось до двійки? Треба змінити пріорітет.
	// І для цього існують дужки, які ви вже використовували в математиці.
	cout << (2 + 6) / 2 << endl; // 4

	// Але є і інші оператори: +,-,*,/,%,++,--,>,<,>=,<=,!, !=, == і так далі.
	// Які у них пріорітет? Для цього я вам скидаю посилання на табличку, в якій є всі оператори,
	// які вам треба. Вони там розбиті про пріорітету і асоціативності. Ось посилання.
	https://ru.cppreference.com/w/cpp/language/operator_precedence

	// Зауваження: якщо посилання не працює, то введіть в гуглі "приоритет операторов С++" і шукайте.

	// В табличці по посиланню найдіть оператор "+", який підписаний "Додавання". У нього пріорітет 6.
	// В оператора ділення "/" пріорітет 5. В кого менший пріорітет, той і спрацює першим.

	// Найшовши всі оператори, які ви вже знаєте і проаналізувавши табличку ви можете зрозуміти, чому:
	if (2 > 8 + 10) // не перевіряється число 2 із 8, а спочатку до 8 додається 10, після чого перевіряється 2 зі значенням 18
	{

	}

	if (10 > 8 && 3 < 5) // не перевіряється вираз "8 && 3", а спочатку перевіться "10 > 8" i "3 < 5"
	{

	}

	// Але виникне наступне питання: що буде тут:
	cout << 8 / 2 * 4 << endl;

	// 1 чи 16? Пріорітети в операторів "/" і "*" однакові. Що робити? В хід вступає вищезазначена асоціативність.
	// Це, якщо що, останній стовпчик в табличці за посиланням. Якщо ви найдете ці обидва оператори, то побачите,
	// що їх асоціативність "ЗЛІВА НАПРАВО" - це означає, що над операндом "2" спочатку виконається ділення (оператор ЗЛІВА)
	// а потім множення (оператор СПРАВА). Відповідь: 16.

	// А якщо зробить так, щоб спочатку виконувалось множення? Треба поставити дужки, змінивши пріорітет.
	cout << 8 / (2 * 4) << endl;

	// Завдяки пріорітету ви можете зрозуміти, чому в цьому рядку
	int myNumber = 2 + 8;
	// спочатку додаються числа 2 і 8, і тільки потім результуюче значення присвоюється змінній.

	// До речі, завдяки асоціативності можна робити наступні речі:
	int a, b, c, d;
	a = b = c = b = 0;

	// Ми тільки що всім 4 змінним дали значення 0. В оператора "=" асоціативність справа наліво, тому спочатку виконується
	// вираз "b = 0". Він присвоює значення 0 змінній b і повертає на своє місце значення 0. далі "c = 0" і так до кінця.

	return 0;
}