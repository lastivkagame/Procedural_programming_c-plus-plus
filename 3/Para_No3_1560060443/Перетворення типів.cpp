#include <iostream>
using namespace std;

int main()
{
	// На даний момент ви маєте розуміти всі стандартні типи даних.
	// Гляньте на наступний код:
	cout << 3 / 2 << endl;

	// Що він виведе? 1.5? Ні, він виводить 1. Чому?

	// Діло в тому що число 3 - це літерал типу int, і 2 - це літерал типу int.
	// Отже і результат має бути типу int. 1.5 - це літерал типу double.

	// Гляньте на наступний код:
	int variable = 3.999;
	cout << variable << endl;

	// Що буде на екрані: 3.999? 3? 4?
	// Відповідь: 3.

	// З двох наведених вище прикладів стає зрозуміло, що тип int МАЄ містити в собі
	// лише цілі числа, а дробова частина ВІДКИДАЄТЬСЯ а не округлюється.

	// В мові С++ можна робити і такі дивні речі:
	int a = 1;
	double b = 2.2;
	float c = 3.3F;
	bool d = true;
	char e = 'A';

	cout << a + b + c + d + e << endl;

	// Що виведе на екран? Це не помилка і на екрані щось має бути. Щоб дізнатися, що
	// треба спочатку визначити якого типу даних буде це значення.

	// І тут в хід вступає Ієрархія типів. Якщо у виразі зустрічаються 2 або більше типів
	// даних, то результатом виразу буде найвищий тип в ієрархії. Ось і вона:

	// long double
	// double
	// float
	// unsigned long long
	// long long
	// unsigned long
	// long
	// unsigned int
	// int
	// bool - short - char - wchar_t - char16_t - char32_t

	// Самим вищий є long double.
	// Самими нищими є bool - short - char - wchar_t - char16_t - char32_t.

	// ЗАУВАЖЕННЯ: найнищі типи даних перетворються АВТОМАТИЧНО в int, якщо використовуються у виразах.
	cout << 'A' + 'B' << endl;
	// Начебто і "А" і "В" літерали типу char, отже і логічно що результат також має бути типу char і на екран виведеться символ.
	// Але на екран виводиться число типу int, бо char АВТОМАТИЧНО перетворився в int.

	// Знаючи ієрархію ще раз глянемо на ось цей приклад:
	cout << a + b + c + d + e << endl;

	// Який тип тут найвищий? Тип double. Отже результат буде типу double. І все перетворюється в ось такий вигляд:
	cout << 1.0 + 2.2 + 3.3 + 1.0 + 65.0 << endl; // на екрані 72.5

	// Гляньте наступний приклад:
	int var1 = 3, var2 = 2;
	double result = var1 / var2; // що запишеться в result?

	// Відповідь 1. Чому? Тому що у виразі var1 / var2 обоє операнди мають тип int, отже і результат буде типу int.
	// А це число 1. Але нам треба int засунути в double, тому 1 перетворюється в 1.0.

	// Як вирішити цю проблему? 1 варіант - перетворити одну або дві змінні в тип double:
	double var3 = 3.0, var4 = 2.0;
	double result2 = var3 / var4; // 1.5

	double var5 = 3.0;
	int var6 = 4.0;
	double result3 = var5 / var6; // 1.5

	// Але якщо не можна міняти типи змінних? Тоді вам необхідно приведення типу. Ви можете ЯВНО вказати комп'ютеру, що
	// хочете перетворити значення одного типу даних в інших. Для цього існує 3 способи:
	// 1. (Тип_Даних)Значення              - використовувався в мові С
	// 2. Тип_Даних(Значення)              - використовується в мові С++ (старий спосіб,  більш простіший)
	// 3. static_cast<Тип_Даних>(Значення) - використовується в мові С++ (новіший спосіб, більш складніший)

	// Для початку можна вибрати 2 варіант, бо ми вчимо С++ і розбиратись в дрібницях 3 варіанту нам зараз не треба.
	int var7 = 3, var8 = 2;
	double result4 = double(var7) / double(var8); // 1.5

	// В даному прикладі кожне значення (НЕ змінна а її значення) міняє тип на double. Тому ви ділете не 3 на 2, а 3.0 на 2.0. А це 1.5.
	// Хоча достатньо привести лише один операнд до типу, інший сам перетвориться.
	
	// Ось ще приклад:
	char letter = 'R';
	cout << letter << endl;      // на екрані буква R
	cout << int(letter) << endl; // на екрані індекс букви R

	return 0;
}