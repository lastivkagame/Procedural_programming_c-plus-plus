#include <iostream>
using namespace std;

int main()
{
	// В мові С++ є оператор break. Його ціль проста - заставити виконання программи
	// вийти із конструкції, в якій находиться break. Ви вже його зустрічали в switch.
	// Ось приклад:
	int number = 1;
	switch (number)
	{
	case 1:
		cout << "One";
		break;
	case 2:
		cout << "Two";
		break;
	}

	// Ви знаєте, що тут робить break (надіюсь). Завдяки ньому ми виходимо з конструкції switch.
	// Без нього в даному випадку вона працювала би некоректно. Так от, завдяки break можна
	// вийти із switch і із любого циклу. Пам'ятаєте вічні цикли? Це цикли, дія в яких буде
	// працювати вічно. Так от, щоб вийти із цих циклів, використовують break. Ось приклад
	while (true)
	{
		cout << number << " ";
		number++;

		if (number == 100)
		{
			break;
		}
	}

	// Ми бачимо що цей цикл вічний, бо в ньому умова завжди правдива. І щоб він не працював вічно,
	// я добавив умову: якщо число рівне 100 - вийти із циклу.

	// Зауваження №1: break виходить ЛИШЕ або зі switch, або з циклу. Він не виходить з if.
	if (true)
	{
		break; // помилка на етапі компіляції. break МАЄ находитись або в циклі або в switch.
	}

	// Якщо тут помилка, так чого її немає вище? Діло в тому що перший if находиться в циклі,
	// і break застосовується до циклу. Глянемо ще декілька прикладів:
	while (true)
	{
		do
		{
			break; // звідки вийде програма завдяки цьому оператору? З внутрішнього циклу, чи
			       // з зовнішнього? Відповідь: break виходить з тієї конструкції, в якій находиться.
			       // А оскільки він находиться в циклі do while, то й вийде з нього.
		} while (true);
	}

	while (true)
	{
		while (true)
		{
			if (true)
			{
				break; // а ось тут куди нас перекине break? Оскільки if ми не рахуємо, то він
				       // находиться у внутрішньому циклі. Отже вийде саме з нього.
			}
		}
	}

	while (true)
	{
		switch (number)
		{
		case 1:
			break; // а ось це вже цікавіше. Звідки ми вийдемо? З циклу чи зі switch?
			       // Логіка та сама: оскільки ми находимось в switch, то й вийдемо з нього
		}
	}

	switch (number)
	{
	case 1:
		while (true)
		{
			break; // а тут? Тут ми вийдемо з циклу, бо оператор находиться в ньому.
			       // Це хороший приклад, тому що якщо не поставити ще один break в кінці
			       // switch, то програма може працювати не так, як ви захочете
		}
		break;
	case 2:
		break;
	}

	// Давайте повернемося до ось цього коду:
	while (true)
	{
		cout << number << " ";
		number++;

		if (number == 100)
		{
			break;
		}
	}

	// Цю задачу можна було переписати гарніше:
	while (number != 100)
	{
		cout << number << " ";
		number++;
	}

	// І вона працювала би ідентично. Виникає питання - де використовувати break і для чого?
	// 1) В більшості операторів switch він просто необхідний, бо інакше программа буде не так працювати
	//    як би вам хотілось.

	// 2) В циклах він використовуються ЛИШЕ тоді, коли треба спростити код програми. ВСЮДИ
	//    де використовуються break в циклах, код можна переписати без нього. Але є задачі,
	//    де його використання дійсно спростить порозуміння коду. Хорошим прикладом є
	//    бінарний пошук, який ви розглянете через декілька тижнів. 

	return 0;
}