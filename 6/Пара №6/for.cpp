#include <iostream>
using namespace std;

int main()
{
	// В мові С++ є ще третій цикл - цикл for. Перед тим як його розглянути, давайте
	// напишемо задачу завдяки циклу while, щоб побачити потім, як красиво її вирішує цикл for.

	// Задача: вивести на екран 10 зірочок.

	int count = 0;
	while (count < 10)
	{
		cout << "*";
		count++;
	}

	// Гляньте детально на цей код. Що ми маємо? Ми маємо змінну count. Вона виступає в ролі
	// лічильника. З кожною виведеною зірочкою її значення збільшується.
	// Ми маємо умову, тому що колись треба закінчити вивід, і після кожної виведеної
	// зірочки ми інкрементуємо лічильник.

	// Так от, коли у нас є лічильник, умова, і постійне збільшення лічильника - використовуйте
	// для цього цикл for. В програмувані дуже багато задач є, де треба пройтись по якомусь
	// списку, наприклад по списку людей, речей чи чогось іншого. Також є багато задач, де
	// треба якусь дію повторити певну кількість разів. Цикл for в таких випадках підходить найкраще.

	// Синтаксис циклу for:
	/*
	for (Ініціалізація_Лічильника; Умова; Зміна_Лічильника)
	{
		Дія
	}
	*/

	// Перед тим як написати нашу задачу завдяки цьому циклу гляньте на синтаксис.
	// Все що нам треба, находиться  в одному рядку. Давайте перепишемо код:

	for (int count = 0; count < 10; count++)
	{
		cout << "*";
	}

	// Гляньте, наскільки спростився код. Давайте проаналізуємо роботу цикла for:
	// 1. Спочатку створюється змінна count
	// 2. Їй задається значення 0.
	// 3. Далі перевіряється умова. Якщо вона брехлива - цикл закінчується.
	// 4. Якщо вона правдива - виконується дія циклу.
	// 5. Після дії виконується Змінна_Лічильника.
	// 6. Заново повторюються всі пункти з пункту №3.
	// 7. Після закінчення циклу змінна, яка створилась на початку - знищиться.

	// Проаналізувавши пункти можна зрозуміти, що цикл for відрізняється від циклу
	// while однією річчю - в ньому можна створити змінну, яка сама потім знищиться.
	// Це зручно, і дає вам можливість використовувати ім'я "count" після циклу без
	// помилок на етапі компіляції.

	// Зауваження №1: змінну можна не створювати в циклі, а просто задавати їй значення.
	//                Але в такому разі змінна буде існувати після циклу, бо створилась до нього.
	int count;
	for (count = 0; count < 10; count++)
	{
		cout << "*";
	}

	// Зауваження №2: змінну можна і не створювати і не присвоювати їй значення в циклі.
	//                Такий прийом рідко застосовується, але якщо вам так хочеться зробити,
	//                то ще раз обдумайте чи треба вам цикл for у ваші задачі. Тим не менш,
	//                навіть якщо поле пусте, крапка з комою має бути, щоб компілятор поняв,
	//                де находиться умова.
	int count = 0;
	for (; count < 10; count++)
	{
		cout << "*";
	}

	// Зауваження №3: умова в циклі for працює по таким же правилам, як і в інших циклах і if.
	//                Тобто там може бути любий вираз, або взагалі не бути. В такому разі цикл
	//                буде працювати вічно.
	for (int count = 0; ; count++)
	{
		cout << "*";
	}

	// Зауваження №4: змінну_лічильника можна також пропустити і написати в дії циклу. Але в такому
	//                разі подумайте, чи точно це вам треба.
	for (int count = 0; count < 10; count++)
	{
		cout << "*";
		count++;
	}

	// Зауваження №5: цикл for, як і інші цикли і оператор if вимагає лише один оператор в дії,
	//                це значить що якщо у вас дія циклу - це один рядок (одна крапка з комою),
	//                то фігурні дужки можна не ставити.
	for (int count = 0; count < 10; count++)
		cout << "*";

	// Зауваження №6: проаналізувавши всі зауваження вище можна написати цикл for так, щоб
	//                він нічим не відрізнявся від коду з циклом while. Але це груба неестетична
	//                помилка. Якщо хтось побачить такий код, вас будуть важати нехорошим програмістом.
	//                Бо ви не використовуйте можливості циклу for на повну.
	int count = 0;
	for (; count < 0;)
	{
		cout << "*";
		count++;
	}

	// Зауваження №7: цикл for від циклу while відрізняється 2 речами: в циклі for можна створити
	//                змінну, яка буде жити до кінця роботи циклу. Інша річ пов'язана з оператором continue.
	//                Детально про нього дивіться в іншому файлі.

	// Зауваження №8: створювати в циклі for можна декілька змінних. Робиться це через кому, і вони мають мати однаковий тип
	for (int i = 0, j = 0; i < 10; i++)
		cout << i << " " << j + j << endl;

	// Зауваження №9: не обов'зяково завжди інкрементувати лічильник. І не обов'язково завжди змінювати ЛИШЕ одну змінну. Завдяки
	//                оператору "кома" можна змінювати декілька змінних
	for (int i = 0, j = 0, k = 0; i < 10; i++, j--, k += 2)
		cout << i << " " << j << " " << k << endl;

	return 0;
}