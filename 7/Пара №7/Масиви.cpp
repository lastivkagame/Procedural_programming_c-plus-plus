#include <iostream>
using namespace std;

int main()
{
	// Представимо що ваша група складається з 10 людей. Мені треба написати програму, в якій кожний з вас
	// введе свій вік, а потім я виведу на екран табличку ваших років. Як це зробити? Створити 10 змінних?
	int age1, age2, age3, age4, age5, age6, age7, age8, age9, age10;

	cout << "Student #1, enter your age: ";
	cin >> age1;
	cout << "Student #2, enter your age: ";
	cin >> age2;
	cout << "Student #3, enter your age: ";
	cin >> age3;
	cout << "Student #4, enter your age: ";
	cin >> age4;
	cout << "Student #5, enter your age: ";
	cin >> age5;
	cout << "Student #6, enter your age: ";
	cin >> age6;
	cout << "Student #7, enter your age: ";
	cin >> age7;
	cout << "Student #8, enter your age: ";
	cin >> age8;
	cout << "Student #9, enter your age: ";
	cin >> age9;
	cout << "Student #10, enter your age: ";
	cin >> age10;

	// Виглядає не дуже красиво. А якби людей було 100 (не в групі, а взагалі в ШАГу наприклад), то створювати би 100 змінних?
	// Також хтось може подумати що тут дія повторюється і її можна загнати в цикл. Але ні, не можна. Причина в тому що дія не однакова.
	// Код компілюється різний із-за того що ви вводите в різні змінні значення, а не в одну.

	// Щоб вирішувати такого роду задачі, нам необхідно згрупувати дані. Зробити якось так, щоб завдяки декільком рядкам (ну максимум 5)
	// ми могли вводити вік абсолютно любої кількості людей. Для цього придумані масиви.

	// Масив - це іменована сукупність однотипних змінних. Коли ви створюєте масив, то в оперативній пам'яті процессор шукає місце
	//         під вашу кількість змінних і зберігає цю область для них. Ця область отримує ім'я масиву. Всі змінні в ній находяться одна за одною.

	// Синтаксис створення масиву: Тип_Даних Ім'я_Масиву[Кількість_Елементів];

	// Створимо ж такий масив для нашої задачі:
	int ages[10];

	// Зауваження №1: массив на англійській мові буде "array" (еррей), але це слово уже зайняте в С++, тому якщо хочете масив назвати так, скорочуйте
	//                до "arr". Я написав це зауваження по тій причині, що в майбутньому буду більшість масивів так називати в прикладах.

	// Зауваження №2: кількість елементів масиву може бути ЛИШЕ цілочисельним літералом (як число 10, 3, 2), або цілочисельною константою.
	int error1[2.2]; // помилка на етапі компіляції. Розмір не може бути дробовим
	
	int size = 3;    
	int error2[size]; // помилка на етапі компіляції. Розмір не може бути змінною. Значення змінної вираховується на етапі виконання програми, 
	                  // а розмір масиву на етапі компіляції

	int error3[-3];   // помилка на етапі компіляції. Розмір може бути лише більшим за 0.
	int error4[0];    // помилка на етапі компіляції. Розмір може бути лише більшим за 0.

	const int SIZE = 3;
	int good[SIZE];   // правильно. Розмір масиву - цілочисельна константа.

	// Зауваження №3: масиви одного типу можна також створювати через кому. Але не створюйте їх в одному рядку разом зі змінними, це плутає трохи.
	// Правильний варіант:
	const int SIZE2 = 10;
	int arr1[SIZE2], arr2[SIZE2];
	int number1, number2;

	// Неправильний варіант:
	const int SIZE2 = 10;
	int arr1[SIZE2], arr2[SIZE2], number1, number2;

	// Окей, маємо масив зі змінних "ages". Як дібратись до самої змінної? По-перше не до змінної, а до елементу.
	// Елемент масиву - це змінна, яка находиться в масиві. З цього моменту я буду такі змінні тільки так називати.
	// По-друге, синтаксис звернення до елементу: Ім'я_Масиву[Індекс_Елемента]

	// Що таке індекс елемента? Це його порядковий номер. Якщо у нас є масив із 5 елементів в оперативній пам'яті, то
	// кожний елемент отримує свій індекс, щоб його можна було унікально ідентифікувати і відрізніти від інших елементів.

	// Зауваження №4: індексація в мові С++ починається з 0. Тобто якщо є масив із 5 елементів, то елементи будуть мати наступні індекси:
	// [...][...][...][Елемент №0][Елемент №1][Елемент №2][Елемент №3][Елемент №4][...][...]

	// Зауваження №5: в "індекс_елементу" не обов'язково писати літерали і константи. Там можна бути значення змінної.

	// Знаючи це, давайте заповнимо наш масив віків:
	cout << "Student #1, enter your age: ";
	cin >> ages[0];
	cout << "Student #2, enter your age: ";
	cin >> ages[1];
	cout << "Student #3, enter your age: ";
	cin >> ages[2];
	cout << "Student #4, enter your age: ";
	cin >> ages[3];
	cout << "Student #5, enter your age: ";
	cin >> ages[4];
	cout << "Student #6, enter your age: ";
	cin >> ages[5];
	cout << "Student #7, enter your age: ";
	cin >> ages[6];
	cout << "Student #8, enter your age: ";
	cin >> ages[7];
	cout << "Student #9, enter your age: ";
	cin >> ages[8];
	cout << "Student #10, enter your age: ";
	cin >> ages[9];

	// Код нічим не виглядає краще, але ми все таки вирішили проблему зі створенням кучи змінних: ми створили 10 змінних завдяки 1 масиві.
	// Тепер якщо треба буде 100, нам прийдеться лише поміняти число "10" на число "100" в кількіості елементів.

	// А тепер можна подивитись на код і сказати що ось ці рядки "Студент №Число" можна зробити однаковими, використовуючи змінну, наприклад ось так:
	int number = 1;
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[0];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[1];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[2];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[3];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[4];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[5];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[6];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[7];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[8];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[9];

	// Тепер одна дія повторюється, але ми все ще не можемо переробити цей код в цикл бо код, пов'язаний з введенням чисел все ще різний. Оскільки 
	// в зауваженню №5 сказано що замість чисел ми можемо використовувати змінні, то скористаємось цим.

	// Зауваження №6: змінна, яка відповідає за індекс елемента, зазвичай називається "і" (скорочено від "індекс"). Бувають випадки коли ця змінна уже зайнята,
	//                тоді можна скористатись іншими назвами, як "j", "k", "index", "ind" і т.п. Тобто в даному випадку я дозволяю називати змінні однією буквою.
	int i = 0;
	int number = 1;
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[i++];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[i++];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[i++];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[i++];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[i++];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[i++];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[i++];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[i++];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[i++];
	cout << "Student #" << number++ << ", enter your age: ";
	cin >> ages[i++];

	// Прекрасно, тепер у нас є дія, яка повторяється декілька разів! Ми можемо використати для цього цикл. Але який? Пам'ятаєте, який цикл нам треба, коли треба лічба?
	// Ми знаємо, що у нас рівно 10 дій, отже треба цикл for. Він разом із масивами дає нам прекрасний код:
	for (int i = 0, number = 1; i < 10; i++, number++)
	{
		cout << "Student #" << number << ", enter your age: ";
		cin >> ages[i];
	}

	// Все, тепер якщо ми захочемо вводити 1000 разів замість 10, нам прийдеться поміняти лише одне число! А якщо добре подивитись, то змінну number можна убрати, використовуючи
	// замість неї вираз "і + 1".

	// Давайте тепер повністю перепишемо цей код включаючи вивід таблиці і обрахунок середнього віку:

	int ages[10];

	// Заповнення віків
	for (int i = 0; i < 10; i++)
	{
		cout << "Student #" << i + 1 << ", enter your age: ";
		cin >> ages[i];
	}

	//  Обрахунок середнього віку
	int sum = 0;
	int average;
	for (int i = 0; i < 10; i++)
		sum += ages[i];

	average = sum / 10;

	// Вивід всіх даних
	for (int i = 0; i < 10; i++)
		cout << "Age of student #" << i + 1 << ": " << ages[i] << endl;
	cout << "Average age in the group = " << average << endl;

	// Зауваження №7: ніколи не пишіть так, як я написав зараз. Проблема в тому, що якщо я захочу поміняти число 10 на 20, скільки разів мені прийдеться це зробити?
	//                В даному випадку 5 разів. А код міг бути і більшим. Я міг просто десь не замітити число 10 і у мене програма би працювала не правильно. Я би потратив
	//                Деякий час, щоб розібратись, де я що упустив. А я міг це все врахувати, ЯКБИ я розмір масиву зробив КОНСТАНТОЮ. І всюди замість 10 писав ім'я константи.
	const int SIZE = 10;
	int ages[SIZE];

	// Заповнення віків
	for (int i = 0; i < SIZE; i++)
	{
		cout << "Student #" << i + 1 << ", enter your age: ";
		cin >> ages[i];
	}

	//  Обрахунок середнього віку
	int sum = 0;
	int average;
	for (int i = 0; i < SIZE; i++)
		sum += ages[i];

	average = sum / SIZE;

	// Вивід всіх даних
	for (int i = 0; i < SIZE; i++)
		cout << "Age of student #" << i + 1 << ": " << ages[i] << endl;
	cout << "Average age in the group = " << average << endl;

	// Тепер якщо я захочу поміняти розмір на 20, мені прийдеться це зробити лише в одному рядку - в значенні константи. Якщо я захочу розширити код, я все одно буду використовувати
	// не число 10 а ім'я константи. Робіть так завжди.

	return 0;
}