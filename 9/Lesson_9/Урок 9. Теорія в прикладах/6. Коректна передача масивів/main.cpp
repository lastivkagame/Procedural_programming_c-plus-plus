#include <iostream>
#include <cstdlib>
using namespace std;

//Коли функція приймає масив, треба вказувати також його розмір
void Show(int[], int);           //перший варіант: без імені
void Show2(int arr[], int size); //другий варіант: більш зрозумілий

//Виникає ще одне питання: а як правильно оформити двовимірний масив?
//Або чому ми не пишемо кількість елементів в квадратних дужках простого масиву

//А от вам синтаксис параметру функції - двовимірного масиву:
//Тип_Данних[][Кількість_Стовпчиків]
//Бац, виникає ще одне питання - чому в перших дужках кількість рядків не пишеться
//а кількість стовпчиків треба вказувати? Хіба це не робить функцію неуніверсальною?

//Зараз я вам усе поясню. Почнемо із ПРАВИЛЬНОГО прототипу функції, яка виводить на екран
//двовимірний масив
void Show3(int[][5], int rows, int columns); //1 параметр - сам двовимірний масив.
											 //2 параметр - к-ість рядків
											 //3 параметр - к-ість стовпчиків

//Перейдіть зараз до рядка №26
void Initialize(int arr[], int size);

int main()
{
	//Створимо простий масив
	const int SIZE = 5;
	int arr1[SIZE] = { 1,6,4,2,10 };

	//Як при виклику функції надсилати туди одновимірний масив?
	//Запам'ятайте: пишемо ЛИШЕ його ім'я
	Show(arr1, SIZE);

	//Зауваження: з двовимірним масивов ТЕ САМЕ
	const int ROWS = 3, COLUMNS = 5;
	int arr2[ROWS][COLUMNS] = { {2,3,7,4,7}, {10,3,7,1,2}, {10,2,5,1,1} };

	Show3(arr2, ROWS, COLUMNS);

	//А тепер відповім на ваші питання:
	//1. Чому коли параметр функції - простий масив, то ми вказуємо квадратні дужки, а розмірність - ні?
	//Відповідь: квадратні дужки ставляться для того, щоб компілятор розумів, що це масив а не змінна.
	//           Кількість елементів не вказується, тому насправді параметр функції - це вказівник.
	//           Оскільки ви не знаєте, що таке вказівники, то ми вернемося до цього питання через
	//           декілька занять.

	//2. Чому в двовимірному масиву ми не пишемо кількість рядків а маємо писати кількість стовпчиків?
	//Відповідь: тому що двовимірний масив - це вказівник на одновимірні масиви. Да, знову вказівники.
	//           Компілятору треба знати, на який ТОЧНО тип данних вказує вказівник. А масив із 3 елементів
	//           і масив із 5 елементів - це різні типи данних. Тому ми вказуємо там ось це число.

	//3. Але ж це робить функцію неуніверсальною. Для чого нам тоді взагалі надсилати туди кількість стовпчиків
	//   якщо їх і так треба вказувати? Виходить що якщо є два двовимірні масиви 3 на 3 і 4 на 7, то для кожного
	//   треба писати свою функцію?
	//Відповідь: так, але цю річ можна буде обійти. Коли ми дійдемо до вказівників, ви дізнаєтесь, як зробити таку
	//           функцію універсальною. Зараз вона не універсальна, тому що там є кількість стопвчиків в параметрі.

	//4. Стоп стоп стоп. Я слідкую за тим, що ви говорите. Ви сказала, що у функцію все передається по значенню.
	//   Ви створили функцію, яка виводить масив на екран. Тобто функція створить свій масив, кожному елементу якого
	//   присвоється відповідне значення із надсилаючого масиву? Ну так же? (так - каже викладач). Окей. Але як
	//   можна створити функцію, яка заповнить масив, який у неї надсилається, якщо вона все одно створить копію?
	//Відповідь: знову вказівники. Слухаєте добре, але не ідеально. Я спочатку показав, що да, по оскільки передача
	//           йде по ЗНАЧЕННЮ, то змінити змінну не можливо. А потім я сказав що цю проблему можна вирішити завдяки
	//           вказівникам і посиланням (Проект №4, рядок №40). А тепер гляньте рядок №40 цього проекту.
	//           (Вау, вони співпали). Там я написав, що функція створює вказівник. Тобто насправді функція не створює
	//           свій масив. Це вказівник. А що це таке, ще будемо вчити. 
	
	//5. А що це нам дає? Ось цей вказівник що дає?
	//Відповідь: спочатку створимо функцію, яка заповнить кожний елемент масиву (прототип на рядку №22, опис на рядку №98)
	//           Ознайомтесь з цими рядками.

	system("pause");
	return 0;
}

//Опишемо функцію, яка виводить одновимірний масив на екран
void Show(int arr[], int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << " ";
	}
	cout << endl;
}

//Опишемо функцію, яка виводить двовимірний масив на екран
void Show3(int arr[][5], int rows, int columns)
{
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < columns; j++)
		{
			cout << arr[i][j] << " ";
		}
	}
	cout << endl;
}

void Initialize(int arr[], int size)
{
	//Оскільки конструкція "int arr[]" - це насправді вказівник на масив типу int, то ми
	//можемо робити наступне
	for (size_t i = 0; i < size; i++)
	{
		arr[i] = rand() % 10; //можна задавати значення кожному елементу того масиву, який
		                      //відправляється у функцію (да да, це все вказівники)
	}
}
