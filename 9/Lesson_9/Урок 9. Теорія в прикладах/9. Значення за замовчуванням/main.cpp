#include <iostream>
using namespace std;

//Бувають випадки, коли у функціях, які мають певну кількість параметрів, деякий параметр
//(зазвичай останній) дуже часто має одне й те саме значення. І ця функція викликається
//і викликається, і кожний раз в цей параметр треба вписувати ще одне значення, щоб можна
//було викликати функцію. Щоб спростити програмістам роботу, в С++ є така річ, як значення
//за замовчуванням. Якщо просто - це значення, яке приймає формальний параметр, коли у функцію
//він не надсилається

//Зробимо простий приклад: напишемо функцію, яка міняє формат зображення на якийсь, в залежності
//від третього параметру. Хотілось би, щоб функція першим параметром приймала шлях до файлу,
//другим його ім'я, а третім ім'я нового формату. Але ми не вміємо працювати ще з рядками, тому
//розглянемо більш убогіший приклад
void ChangeFormat(int folderIdentity, int fileIdentity, int newFormat)
{
	switch (newFormat)
	{
	case 1: //представимо що тут .jpeg
		break;
	case 2: //представимо що тут .jpg
		break;
	case 3: //представимо що тут .png
		break;
	default:
		cout << "Incorrect format.\n";
		break;
	}

	//Нам абсолютно не важливо, як має працювати функція, щоб показати перевагу значень за замовченням.
	//Представте ситуацію, що в коді часто треба змінювати формат саме на .jpeg. Перейдіть у функцію main
}

//Зараз краще перейдіть до функції main

//Опишемо спочатку прототип. Перегляньте, де в ньому застосовується значення за замовчуванням
void ChangeFormat2(int folderIdentity, int fileIdentity, int newFormat = 1); //ОСЬ ВОНО, ЗАМІТИЛИ?

int main()
{
	ChangeFormat(1, 2, 1); //третій параметр 1, отже міняємо на .jpeg
	ChangeFormat(8, 32, 2); //третій параметр 2, отже міняємо на .jpg
	ChangeFormat(5, 5, 1); //третій параметр 1, отже міняємо на .jpeg
	ChangeFormat(6, 8, 3); //третій параметр 3, отже міняємо на .png
	ChangeFormat(81, 12, 1); //третій параметр 1, отже міняємо на .jpeg

	//Ви бачите, що .jpeg повторюється найчастіше. Було би добре, якби ми відпраляли у функцію лише
	//ідентифікатор папки і файлу, а вона сама розуміла, що формат треба jpeg. Переходьте до рядка №82

	//А тепер перепишемо виклики, використовуючи нову функцію
	ChangeFormat2(1, 2);     //третього параметру НЕМАЄ, отже міняємо на .jpeg
	ChangeFormat2(8, 32, 2); //третій параметр 2, отже міняємо на .jpg
	ChangeFormat2(5, 5);     //третього параметру НЕМАЄ, отже міняємо на .jpeg
	ChangeFormat2(6, 8, 3);  //третій параметр 3, отже міняємо на .png
	ChangeFormat2(81, 12);   //третього параметру НЕМАЄ, отже міняємо на .jpeg

	//Я хотів навести більш практичний і водночас простий для порозування приклад застосування значень
	//за замовчуванням. Тобто я хочу, щоб ви зрозуміли, що значення за замовчуванням - це лише зручність
	//для зменшення написання коду.

	//Зауваження №1: гляньте на рядок № 37. Це прототип, в якому ми вказали значення за замовчуваням.
	//               Якщо воно вказується в прототипі, то в описі вказуваться не має (інакше буде помилка
	//               на етапі компіляції

	//Зауваження №2: значення за замовчуванням можна вказувати лише зліва направо. Розглянемо на прототипах
	//               дозволені і не дозволені варіанти:
	void A(int a, int b, int c = 4);         //можна
	void B(int a, int b = 3, int c = 4);     //можна
	void C(int a = 2, int b = 3, int c = 4); //можна
	void D(int a, int b = 3, int c);         //НЕ можна
	void E(int a = 2, int b = 3, int c);     //НЕ можна
	void F(int a = 2, int b, int c = 4);     //НЕ можна

	//Чому не можна? А як ви викличете функцію F, надсилаючи туди лише 1 параметр?
	F(10); //куди 10 запишеться? в "b"? Так цей параметр ж другий. Значить в "а"? Тоді ж немає другого параметру.

	system("pause");
	return 0;
}

//Перепишемо цю функцію, добавивши значення за замовчунням
void ChangeFormat2(int folderIdentity, int fileIdentity, int newFormat)
{
	//Що нам дає вираз = 1? Він означає, що якщо ми викличемо цю функцію, надсилаючи в неї ЛИШЕ
	//2 параметри, то третій автоматично отримає значення 1. Переходьте до рядка
	switch (newFormat)
	{
	case 1: //представимо що тут .jpeg
		break;
	case 2: //представимо що тут .jpg
		break;
	case 3: //представимо що тут .png
		break;
	default:
		cout << "Incorrect format.\n";
		break;
	}
}