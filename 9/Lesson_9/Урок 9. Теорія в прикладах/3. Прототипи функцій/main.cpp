#include <iostream>
using namespace std;

//Правильний варіант оголошувати функції через прототипи. 
//Прототип - це лише оголошення функції, без її опису.

//З цього моменту ви всюди будете створювати функції через прототипи. Ви самі відчуєте їх
//перевагу, якщо дійдете до заняття №18. Викладач має на занятті вам розказати, для чого вони.

//Синтаксис створення прототипу: Тип_Повертаючого_Значення Ім'я_Функції(Список_Параметрів);

//Зауваження: замітьте, відмінність прототипу від опису функції в тому, що в прототипі після
//            закриваючої дужки стоїть крапка з комою і немає тіла функції.

//Зауваження 2: замітьте, відмінність прототипу від виклику функції в тому, що в прототипі є
//              тип повертаючого значення, а при виклику ми його не пишемо.

//Створимо два прототипи:
void SaySomething(); //прототип функції, яка нічого не приймає, і нічого не повертає
int SumTwoNumbers(int number1, int number2); //прототип функції, яка приймає два числа і повертає їх суму

//Зауваження 3: при описі прототипу ім'я параметрів вказувати не обов'язково (це робиться дуже рідко,
//              наприклад в даному випадку ми по імені функції бачимо, що вона просто добавить три числа.
int SumThreeNumbers(int, int, int); 

//А тепер опишемо прототип функції, яка підносить число до степеню
int ToPower(int, int); //Питання: де находиться число а де степінь? При виклику функції ми це знати не будемо
                       //         тому поки всюди давайте параметрам в прототипах імена (з часом ви зустрінете
                       //         інші випадки не вказування імен в прототипі)

//Зауваження 4: якщо створили прототип - обов'язково створіть і опис функції. Інакше 
//              Visual Studio 2017 підкреслить ваш прототип зеленим кольором і напише в попередженнях, що не
//              найдено тіла функції
void IdontHaveABody();

int main()
{
	//Виклик функцій
	SaySomething();
	SumTwoNumbers(3, 5); //Значення суми повертається в "нікуди"
	int sum = SumTwoNumbers(3, 5); //в змінну sum запишеться значення 8
	cout << SumThreeNumbers(1, 2, 3) << endl; //сума трьох чисел виведеться зразу на екран

	IdontHaveABody(); //ця функція немає тіла. То чому немає синтаксичної помилки? Діло в тому
	                  //що компілятор розглядає кожний .cpp файл окремо. І в одному з них (у нашому
	                  //випадку це один .cpp файл main) він бачить прототип функції (рядок 34).
	                  //не найшовши її в цьому файлі він каже компоновщику (друже, пошукай в інших файлах
	                  //опис функцій). Звісно що компоновщик не найде його (бо інших файлів у нас немає)
	                  //і у вас буде помилка на етапі компоновки, яка виведеться вам в список помилок.

	//ПРОХАННЯ: функції називайте з великої букви (подивіться, як я їх називав в цьому і попередніх двох проектах)
	//			Також старайтеся давати імена функціям дієсловами. Наприклад "вивести", "порахувати", "зробити те" і т.п.

	//Зауваження 5: Ті параметри, які ви пишете при описі функції або її прототипі, називаються формальними параметрами.
	//              Ті значення, які ви відправляєте у функцію, називаються фактичними параметрами. Наприклад, числа 3 і 5
	//              в рядку 41 є фактичними параметрами, а змінні number1,number2 в рядку 65 є формальними параметрами.
	//              В деяких джерелах параметри називаються аргументами (формальні і фактичні аргументи). В деяких джерелах
	//              формальні параметри/аргументи називають параметрами, а фактичні параметри/аргументи називаються аргументами.
	//              Раджу називати ці речі так, як я описую їх в рядках 54-55.

	return 0;
}

//Після функції main() обов'язково описуємо всі наші прототипи
void SaySomething()
{
	cout << "Oh, it's my favorite place!\n";
}

int SumTwoNumbers(int number1, int number2)
{
	return number1 + number2; //не обов'язково відправляти в return значення змінних.
	                          //можна відправляти цілі вирази, аби вони читались зрозуміло
}

int SumThreeNumbers(int number1, int number2, int number3)
{
	//Зауваження 6: замітьте, що хоч в прототипі цієї функції немає імен в параметрах,
	//              в її описі вони мають бути (інакше що ви будете писати, коли захочете
	//              звернутись до них?).

	return number1 + number2 + number3;
}
