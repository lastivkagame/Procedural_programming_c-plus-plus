#include <iostream>
using namespace std;

int main()
{
	// Представимо ситуацію, що користувач вводить число. Якщо це 1 - вивести на екран слово "ОДИН".
	// Якщо це 2 - вивести "ДВА". Якщо 3 - "ТРИ". Інакше "Інше число".

	int number;
	cout << "Enter your number: ";
	cin >> number;

	if (number == 1)
		cout << "One";
	else if (number == 2)
		cout << "Two";
	else if (number == 3)
		cout << "Three";
	else
		cout << "Other number";

	cout << endl;

	// Коли вам треба порівнювати значення змінної з конкретними значеннями (як вище), КРАЩЕ
	// використовуйте для цього оператор switch.

	// Синтаксис використання оператору switch:
	/*
	switch (Ім'я_Змінної)
	{
		case Значення1:
			Дія №1
			break;
		case Значення2:
			Дія №2
			break;		
		case ЗначенняN:
			Дія №N
			break;
		default:
			Дія За Замовчуванням
			break;
	}
	*/

	// Перепишемо приклад зверху через switch
	switch (number)
	{
	case 1:		
		cout << "One";
		break;
	case 2:
		cout << "Two";
		break;
	case 3:		
		cout << "Three";
		break;
	default:
		cout << "Other number";
		break;
	}
	cout << endl;

	// Спочатку здається що код більший, але чим він кращий? Спочатку розберемо його роботу:
	// Значення змінної number перевіряється з кожним із значень мітки case. Якщо number рівний 1,
	// то спрацьовує дія в мітці case 1. Якщо number рівний 2, то в мітці 2. І так далі.
	// Якщо жодна мітка не підходить, то спрацьовує мітка default. Ця мітка робить схожу роботу,
	// яку робить else і вона також не обов'язкова.
	
	// Також можна замітити оператор break. Він пишеться в кінці коду кожної мітки. Для чого?
	// Завдяки ньому виконання програми виходить із конструкції switch. Представте, що number = 1.
	// Тоді спрацює мітка №1. Якщо в ній не буде break, то після неї виконається мітка 2. І так далі,
	// поки не зустрінеться break, або поки не закінчаться мітки в switch.

	// Так чим switch кращий за if-else? Тим що він швидчий, йому не треба нічого ні з чим перевіряти.
	// Він отримав значення - переключився на нього і виконав. А в if треба спочатку перевіряти умову.
	// Щоб зрозуміти краще переваги switch, треба побачити, в які команди компілятор перетворює
	// switch і в які if. Не хочете цим займатись, тоді вірне на слово.

	// А чим switch гірший за if-else? Тим, що в switch все що ви можете робити - це порівнювати
	// змінну з конкретним значенням, а в if-else можете використовувати об'єднані логічні умови
	// і кучу інших операторів.

	// Де використовувати switch а де if?
	// switch - якщо треба взяти змінну і перевірити її на рівність якомусь значенню. Наприклад
	//          реалізація меню, реалізація номеру кольору і т.д.
	// if - коли треба перевіряти не на рівність, а на все інше (більше, менше і т.п.)

	// Зауваження №1: значеннями мітки можуть бути лише літерали/константи і лише цілочисельні
	//                типи даних (char, int, short, long і т.п.)

	// Зауваження №2: не завжди в кінці кожної мітки має бути оператор break. Є задачі, в яких
	//                він лишний. Наприклад в файлі "Перечислення" є одна з таких.

	// Зауваження №3: по логіці якщо завдяки break ми виходимо з конструкції, то остання мітка
	//                може й не мати break, все одно після неї switch закінчується. Але я
	//                все одно ставлю в кінці останньої мітки (для мене це завжди default) оператор
	//                break, бо так все виглядає виразніше.

	return 0;
}